// Vercel Serverless Function for OpenRouter API
// Model: Z.AI: GLM 4.6

const OPTION_LETTERS = ['A', 'B', 'C', 'D'];

const QUESTION_BANK = [
    { id: 'q1', text: 'Какова ваша основная роль в рабочем процессе?', options: [
        'Я — исполнитель: отвечаю за конкретные задачи и их качество.',
        'Я — координатор/менеджер: управляю процессами и/или командой.',
        'Я — стратег/владелец: определяю вектор развития, ищу новые возможности.',
        'Я — «универсальный солдат»: делаю все вышеперечисленное.'
    ] },
    { id: 'q2', text: 'С какой из этих рутинных задач вы сталкиваетесь чаще всего?', options: [
        'Обработка и структурирование больших объемов информации (отчеты, письма, документы).',
        'Поиск идей, подготовка контента (презентации, статьи, посты).',
        'Монотонные операции и повторяющиеся действия в программах.',
        'Анализ данных для принятия решений (поиск трендов, аномалий).'
    ] },
    { id: 'q3', text: 'Как бы вы описали свой текущий уровень владения современными цифровыми инструментами (кроме стандартного офисного пакета)?', options: [
        'Уверенный пользователь: легко осваиваю новые программы, если есть инструкция.',
        'Энтузиаст: пробую новые сервисы и приложения «для себя», ищу способы оптимизации.',
        'Power User: активно использую скрипты, макросы, сложные формулы или no-code/low-code платформы.',
        'Новичок: предпочитаю проверенные и знакомые инструменты.'
    ] },
    { id: 'q4', text: 'Как вы оцениваете влияние AI на вашу отрасль в ближайшие 2-3 года?', options: [
        'Критическое: те, кто не адаптируется, останутся позади.',
        'Значительное: появятся новые инструменты, но основы профессии не изменятся.',
        'Умеренное: коснется только некоторых аспектов работы.',
        'Пока неясно: слишком много шума, мало конкретики.'
    ] },
    { id: 'q5', text: 'Что является главным барьером для вас в активном использовании AI прямо сейчас?', options: [
        'Нехватка времени: нет свободных часов, чтобы сесть и разобраться.',
        'Информационный перегруз: неясно, с чего начать, какие инструменты действительно полезны.',
        'Техническая сложность: кажется, что это требует навыков программирования.',
        'Отсутствие конкретной задачи: не понимаю, как применить AI в своей работе.'
    ] },
    { id: 'q6', text: 'Какое из утверждений об AI вызывает у вас наибольшее опасение?', options: [
        '«AI может обесценить мой опыт и даже заменить меня».',
        '«Данные, которые я доверю AI, могут быть использованы небезопасно».',
        '«Это “черный ящик”, я не смогу контролировать результат и нести за него ответственность».',
        '«Чтобы получить реальную пользу, нужны огромные бюджеты».'
    ] },
    { id: 'q7', text: 'Вспомните свой последний опыт изучения новой сложной технологии. Что было самым трудным?', options: [
        'Найти качественные, структурированные материалы.',
        'Совмещать обучение с основной работой.',
        'Отсутствие наставника, которому можно задать вопрос.',
        'Понять, как перейти от теории к практике и получить первый результат.'
    ] },
    { id: 'q8', text: 'Представьте, что вы уже начали внедрять AI. Какая гипотетическая проблема вас тревожит больше всего?', options: [
        'Я потрачу много времени на обучение, но не получу ожидаемого роста производительности.',
        'Мое руководство или команда не оценят инициативу, сочтут это «игрушками».',
        'Инструменты, которые я освою, быстро устареют.',
        'Я совершу ошибку из-за неправильного использования AI, которая будет стоить дорого.'
    ] },
    { id: 'q9', text: 'Если бы вы могли получить один «суперэффект» от AI уже завтра, что бы вы выбрали?', options: [
        'Освободить 5-10 часов в неделю за счет автоматизации рутины.',
        'Генерировать идеи и решения для сложных задач на порядок быстрее.',
        'Создать персонализированного ассистента, который помогает с аналитикой и планированием.',
        'Получить новое, востребованное на рынке умение и повысить свою стоимость как специалиста.'
    ] },
    { id: 'q10', text: 'Какой формат обучения вы считаете для себя наиболее эффективным?', options: [
        'Короткий интенсив (мастер-класс): один конкретный инструмент/навык за несколько часов.',
        'Комплексный курс: глубокое погружение в тему с домашними заданиями и обратной связью.',
        'Практический воркшоп: совместное создание работающего решения (например, агента) под руководством эксперта.',
        'Самостоятельное изучение по предоставленным материалам с возможностью задавать вопросы в чате.'
    ] },
    { id: 'q11', text: 'Что для вас важнее в обучении?', options: [
        'Фундаментальные знания: я хочу понимать, «как это работает» изнутри.',
        'Практические инструменты: мне нужен готовый воркфлоу, который я смогу применить сразу после занятия.',
        'Поддержка и нетворкинг: важно быть в сообществе единомышленников и общаться с наставником.',
        'Гибкость: возможность проходить обучение в своем темпе.'
    ] },
    { id: 'q12', text: 'Какое направление вам кажется наиболее перспективным для ваших задач?', options: [
        'Автоматизация рабочих процессов (Workflow Automation).',
        'Создание умных чат-ботов и агентов.',
        'Продвинутый анализ данных и прогнозирование.',
        'Генерация креативного контента (тексты, изображения).'
    ] },
    { id: 'q13', text: 'Есть ли какая-то конкретная задача или проблема в вашей работе, для которой вы ищете решение, но не нашли ее в вариантах выше? Опишите ее кратко.', options: [] }
];

const ARCHETYPE_LABELS = {
    strategist: 'Визионер',
    optimizer: 'Оптимизатор',
    pioneer: 'Предприниматель',
    analyst: 'Аналитик',
    pragmatist: 'Прагматик',
    enthusiast: 'Энтузиаст',
    skeptic: 'Скептик',
    observer: 'Наблюдатель',
    generalist: 'Универсал',
    seeker: 'Искатель'
};

function expandTestDataForPrompt(testData = {}) {
    const answers = [];
    QUESTION_BANK.forEach((question, index) => {
        const raw = testData[question.id];
        if (raw === undefined || raw === null || raw === '') {
            answers.push(`${index + 1}. ${question.text}\nОтвет: не указан (нужно уточнение).`);
            return;
        }

        if (question.options.length === 0) {
            const freeText = String(raw).trim() || 'Ответ не был дан';
            answers.push(`${index + 1}. ${question.text}\nСвободный ответ: ${freeText}`);
            return;
        }

        const letter = String(raw).trim().toUpperCase();
        const optionIndex = OPTION_LETTERS.indexOf(letter);
        const optionText = optionIndex >= 0 && question.options[optionIndex]
            ? question.options[optionIndex]
            : 'Вариант не распознан';

        answers.push(`${index + 1}. ${question.text}\nВыбранный вариант (${letter || '?'}): ${optionText}`);
    });
    return answers.join('\n\n');
}

export default async function handler(req, res) {
    // CORS headers
    res.setHeader('Access-Control-Allow-Credentials', true);
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS,PATCH,DELETE,POST,PUT');
    res.setHeader(
        'Access-Control-Allow-Headers',
        'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version'
    );

    if (req.method === 'OPTIONS') {
        res.status(200).end();
        return;
    }

    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method not allowed' });
    }

    try {
        const { testData, profileType, readinessScore } = req.body;

        // Validate input
        if (!testData || typeof testData !== 'object' || Object.keys(testData).length === 0) {
            console.error('Invalid testData:', testData);
            return res.status(400).json({
                error: 'Missing or invalid testData',
                received: { hasTestData: !!testData, testDataType: typeof testData, keys: testData ? Object.keys(testData).length : 0 }
            });
        }

        if (!profileType) {
            console.error('Missing profileType');
            return res.status(400).json({ error: 'Missing profileType' });
        }

        // OpenRouter API configuration
        const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;

        if (!OPENROUTER_API_KEY) {
            console.error('OPENROUTER_API_KEY not configured');
            return res.status(500).json({ error: 'API configuration missing' });
        }

        const detailedAnswers = expandTestDataForPrompt(testData || {});

        // Prepare prompt for GLM 4.6 with 10 archetypes
        const systemPrompt = `Вы - эксперт по AI и автоматизации с опытом анализа мотивации и подходов людей к технологическим изменениям.

10 АРХЕТИПОВ (вы ДОЛЖНЫ выбрать ОДИН наиболее подходящий):

1. **Оптимизатор** - Видит процессы, ищет узкие места и способы устранить хаос. AI для него = инструмент для борьбы с рутиной и возврата контроля над временем.

2. **Визионер** - Думает на годы вперед, видит в AI возможность переизобрести индустрию. Деньги вторичны, главное - создать новую ценность и влияние.

3. **Прагматик** - Фокусируется на конкретных результатах здесь и сейчас. AI = набор практических инструментов для решения текущих задач, без философии.

4. **Предприниматель** - Постоянно ищет новые возможности для роста и масштабирования. AI = конкурентное преимущество и способ вырваться вперед.

5. **Энтузиаст** - Любит пробовать всё новое, экспериментировать. AI = захватывающая территория для открытий. Уже играл с инструментами, хочет углубиться.

6. **Скептик** - Критически оценивает хайп, сомневается в обещаниях. Пришел проверить - не фигня ли это. Готов переубедиться, но нужны доказательства.

7. **Наблюдатель** - Осторожно изучает издалека, прежде чем принять решение. AI интересен, но пока не готов прыгать в воду. Нужна уверенность и понятный план.

8. **Универсал** - Совмещает множество ролей, тянет на себе кучу задач. Тонет в многозадачности. AI = способ клонировать себя и не утонуть окончательно.

9. **Аналитик** - Ценит глубину, фундамент, понимание принципов. AI требует не просто "нажать кнопку", а разобраться, как это работает на самом деле.

10. **Искатель** - Ищет новый смысл и роль в меняющемся мире. Возможно выгорел или устал от текущей работы. AI = шанс переосмыслить свою профессию и найти новый вызов.

Ваша задача:
- Проанализировать ВСЕ ответы пользователя
- ВЫБРАТЬ ОДИН архетип из 10 (наиболее подходящий)
- Дать честный, развернутый, интересный анализ
- Быть конкретным, многословным (не менее 4 больших абзацев)
- Поддерживать человека, но говорить правду`;

        const displayArchetype = ARCHETYPE_LABELS[profileType] || profileType || 'Неизвестно';

        const userPrompt = `Контекст пользователя:
- Предварительно рассчитанный профиль: ${displayArchetype}
- Балл готовности: ${readinessScore ?? 'не указан'} из 100

Полный список ответов (обязательно учти каждый пункт, упоминай их в тексте и цитируй ключевые фразы):
${detailedAnswers}

ОБЯЗАТЕЛЬНО начни свой ответ с строки:
АРХЕТИП: [название архетипа]

Далее подготовь развёрнутый анализ в 5 частях (каждая — отдельный абзац 5-7 предложений, общий объём не менее 3000 знаков):
1. **Выбор архетипа** — объясни, почему выбран именно этот архетип, опираясь на конкретные ответы (приводи цитаты в кавычках).
2. **Глубокий портрет** — покажи сильные стороны и мотивацию человека, как они проявляются в его задачах и стиле работы.
3. **Точки риска** — честно опиши ограничения, страхи и что может пойти не так, опираясь на ответы.
4. **Ресурсы и поддержка** — что у человека уже есть (компетенции, окружение, привычки), что поможет внедрять AI.
5. **Первые шаги** — дай 4 конкретных действия с привязкой к архетипу и ответам.

Стиль: профессиональный коуч, который говорит по делу, без воды и клише. Если текста получается меньше 3000 знаков, продолжай развивать мысли (добавь примеры, формулируй более подробно), пока требование не выполнено.`;

        // Call OpenRouter API with timeout
        const controller = new AbortController();
        const timeout = setTimeout(() => controller.abort(), 60000); // 60 second timeout (модель может думать 1-2 минуты)

        try {
            const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
                    'Content-Type': 'application/json',
                    'HTTP-Referer': process.env.SITE_URL || 'https://www.expertai.academy',
                    'X-Title': 'AI Readiness Test'
                },
                body: JSON.stringify({
                    model: 'z-ai/glm-4.6',
                    messages: [
                        { role: 'system', content: systemPrompt },
                        { role: 'user', content: userPrompt }
                    ],
                    temperature: 0.7,
                    max_tokens: 2200  // Увеличено для развернутых ответов (~3000+ символов)
                }),
                signal: controller.signal
            });
            clearTimeout(timeout);

            if (!response.ok) {
                const errorText = await response.text();
                console.error('OpenRouter API error:', errorText);
                return res.status(response.status).json({
                    error: 'AI service error',
                    details: errorText
                });
            }

            const data = await response.json();
            const aiMessage = data.choices?.[0]?.message?.content;

            if (!aiMessage) {
                throw new Error('No response from AI');
            }

            return res.status(200).json({
                success: true,
                message: aiMessage,
                profile: profileType,
                readinessScore: readinessScore,
                aiGeneratedStrategy: aiMessage,
                usage: data.usage
            });

        } catch (fetchError) {
            clearTimeout(timeout);
            if (fetchError.name === 'AbortError') {
                console.error('OpenRouter API timeout');
                return res.status(504).json({
                    error: 'AI service timeout',
                    message: 'Request took too long'
                });
            }
            throw fetchError;
        }

    } catch (error) {
        console.error('Error in generate-results:', error);
        return res.status(500).json({
            error: 'Internal server error',
            message: error.message
        });
    }
}
